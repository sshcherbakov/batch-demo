<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd">

	<description>Example job to get you started. It provides a skeleton for a typical batch application.</description>
 	
	<batch:job id="job1">
		<batch:step id="step1">			
			<batch:tasklet transaction-manager="transactionManager" start-limit="100">
				<batch:chunk reader="lottoReader" writer="lottoWriter" processor="delayingProcessor" 
					commit-interval="10" skip-limit="20">
					<batch:skippable-exception-classes>
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException"/>
					</batch:skippable-exception-classes>
				</batch:chunk>
			</batch:tasklet>
		</batch:step>
		<batch:listeners>
			<batch:listener>
				<bean class="batch.demo.job.ExecutionTimeMeasurer" />
			</batch:listener>
		</batch:listeners>
	</batch:job>
	
	<bean id="delayingProcessor" class="batch.demo.job.DelayingProcessor" scope="step" />
	
	<bean id="drawing" class="batch.demo.domain.Drawing" scope="prototype" /> 
	
	<bean id="lottoReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">
		<property name="linesToSkip" value="1" />
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
				<property name="lineTokenizer">
					<bean class="org.springframework.batch.item.file.transform.FixedLengthTokenizer">
						<property name="columns" value="1-10, 14-30, 35-36, 38-38, 40-46, 48-53, 55-68"/>
						<property name="names" value="date, numbers, zz, s, spiel77, super6, stake" />
						<property name="strict" value="false" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper">
					    <property name="prototypeBeanName" value="drawing" />
					    <property name="customEditors">
					    	<util:map>
					    		<entry key="java.util.Date"><bean class="batch.demo.util.DatePropertyEditor" /></entry>
					    		<entry key="java.math.BigDecimal"><bean class="batch.demo.util.BigDecimalPropertyEditor" /></entry>
					    	</util:map>
					    </property>
					</bean>
				</property>
			</bean>
		</property>
		<property name="resource" value="#{jobParameters['batch.demo.input.file']}" />
	</bean>

	<bean id="lottoWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql" value="insert into DRAWING (date, numbers, zz, s, spiel77, super6, stake) values (:date, :numbers, :zz, :s, :spiel77, :super6, :stake)" />
		<property name="itemSqlParameterSourceProvider">
			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

</beans>
