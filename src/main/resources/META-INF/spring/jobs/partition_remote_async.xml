<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:task="http://www.springframework.org/schema/task"
       xmlns:p="http://www.springframework.org/schema/p" xmlns:int="http://www.springframework.org/schema/integration"
       xmlns:int-jms="http://www.springframework.org/schema/integration/jms"
       xsi:schemaLocation="http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-2.1.xsd http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration.xsd http://www.springframework.org/schema/integration/jms http://www.springframework.org/schema/integration/jms/spring-integration-jms.xsd">

    <description>Example job to get you started. It provides a skeleton for a typical batch application.</description>

    <!-- Can't use syncronized or we loose restartibility -->

    <batch:job id="job1" parent="measuringJob">
        <batch:step id="step">
            <batch:partition handler="partitionHandler" step="step1" partitioner="partitioner"/>
        </batch:step>
    </batch:job>

    <batch:step id="step1" parent="parentStep" />

    <bean id="partitioner" class="batch.demo.job.FlatFilePartitioner" scope="step"
          p:resource="#{jobParameters['batch.demo.input.file']}"/>

    <bean id="partitionHandler" class="org.springframework.batch.integration.partition.MessageChannelPartitionHandler">
        <property name="messagingOperations">
            <bean class="org.springframework.integration.core.MessagingTemplate">
                <property name="defaultChannel" ref="requests"/>
                <property name="receiveTimeout" value="30000"/>
            </bean>
        </property>
        <property name="stepName" value="step1"/>
        <property name="gridSize" value="${batch.demo.grid.size}"/>
    </bean>

    <int:channel id="requests">
        <!--<int:dispatcher task-executor="taskExecutor"/>-->
        <int:interceptors>
        	<int:ref bean="anonymousChannelExtractor"/>
        </int:interceptors>
    </int:channel>

    <int:channel id="staging"/>
    
    <bean id="anonymousChannelExtractor" class="batch.demo.util.AnonymousChannelExtractor">
    	<property name="delegatingChannel" ref="anonymousChannel" />
    </bean>
    <bean id="anonymousChannel" class="batch.demo.util.DelegatingChannel" />

    <int:aggregator ref="partitionHandler" input-channel="staging" output-channel="anonymousChannel"/>

    <int-jms:outbound-channel-adapter channel="requests" destination="requestsQueue" />
    
	<bean id="repliesQueue" class="org.apache.activemq.command.ActiveMQQueue">
        <constructor-arg value="repliesQueue"/>
    </bean>
    
    <int-jms:message-driven-channel-adapter channel="staging" receive-timeout="30000" destination="repliesQueue" 
    		concurrent-consumers="${batch.demo.grid.size}" />

	<!-- Slave side -->

    <int-jms:inbound-gateway request-channel="worker" request-destination="requestsQueue" default-reply-queue-name="repliesQueue"
                             concurrent-consumers="${batch.demo.grid.size}"/>

    <int:channel id="worker"/>

    <int:service-activator ref="stepExecutionRequestHandler" input-channel="worker"/>

    <!-- This is the "remote" worker (which in this case is local) -->
    <bean id="stepExecutionRequestHandler"
          class="org.springframework.batch.integration.partition.StepExecutionRequestHandler"
          p:stepLocator-ref="stepLocator" p:jobExplorer-ref="jobExplorer"/>

    <bean id="stepLocator" class="org.springframework.batch.integration.partition.BeanFactoryStepLocator"/>

    <task:executor id="taskExecutor" pool-size="${batch.demo.grid.size}"/>

</beans>
